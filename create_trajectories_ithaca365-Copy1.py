from tracking.track import format_sample_result, AB3DMOT
import numpy as np
from pathlib import Path
import sys
import os
import os.path as osp
from tqdm import tqdm
import hydra
from omegaconf import DictConfig, OmegaConf
from ithaca365.ithaca365 import Ithaca365
from pyquaternion import Quaternion
import json
import matplotlib.pyplot as plt
from os import listdir
from os.path import isfile, join
import pandas as pd
# NUSCENES_TRACKING_NAMES = [
#   'car',
#   'pedestrian'
# ]
NUSCENES_TRACKING_NAMES = [
  'car'
]

def eprint(*args, **kwargs):
    print(*args, file=sys.stderr, **kwargs)
    
def display_args(args):
    eprint("========== ldls info ==========")
    eprint("host: {}".format(os.getenv('HOSTNAME')))
    eprint(OmegaConf.to_yaml(args))
    eprint("=======================================")

# def get_pose(sample, nusc):
#     pointsensor_token = sample['data']['LIDAR_TOP']
#     pointsensor = nusc.get('sample_data', pointsensor_token)
#     poserecord = nusc.get('ego_pose', pointsensor['ego_pose_token'])
#     return np.array(poserecord['translation'])

@hydra.main(version_base='1.1', config_path="configs/", config_name="test_ithaca365.yaml")
def main(args: DictConfig):
    display_args(args)
    nusc = Ithaca365(version='v1.1', dataroot='/share/campbell/Skynet/nuScene_format/v1.1', verbose=True)
    track_dir = args.data_paths.ldls_track_path
    track_file_paths = [f for f in listdir(track_dir) if isfile(join(track_dir, f))]
    for track_file_path in track_file_paths:
        results = {}
        fake_scene_token = track_file_path.split('.')[0]
        track_result_path = fake_scene_token
        track_file_path = osp.join(args.data_paths.ldls_track_path, track_file_path)

        data = pd.read_csv(track_file_path, header=None)
        track_data_samples = data.values.tolist()
        # loop through samples
        mot_trackers = {tracking_name: AB3DMOT(args.covariance_id, tracking_name=tracking_name, use_angular_velocity=args.use_angular_velocity, tracking_nuscenes=True) for tracking_name in NUSCENES_TRACKING_NAMES}

        for track_data_sample in track_data_samples:
#             sample = nusc.get('sample', sample_token)
            lidar_data_token = track_data_sample[0]
#             sample_data_record = nusc.get("sample_data", sample['data']['LIDAR_TOP'])
#             ego_pose = nusc.get("ego_pose", sample_data_record['ego_pose_token'])
#             print(f'ego_pose: {ego_pose}')
            # get boxes generated by ldls for sample
            boxes_path = osp.join(args.data_paths.ldls_full_box_path, f"{lidar_data_token}.npz")
            with np.load(boxes_path, allow_pickle=True) as f:
#                 pedestrian_boxes = f['pedestrian']
                boxes = f['car'].tolist()
    

            results[lidar_data_token] = []
            dets = {tracking_name: [] for tracking_name in NUSCENES_TRACKING_NAMES}
            info = {tracking_name: [] for tracking_name in NUSCENES_TRACKING_NAMES}
#             trans = get_pose(sample, nusc)

            for box in boxes: # boxes are in global coordinate
                q = Quaternion(box.orientation)
                
                angle = q.angle if q.axis[2] > 0 else -q.angle
                #[h, w, l, x, y, z, rot_y]
                detection = np.array([
                  box.wlh[2], box.wlh[0], box.wlh[1], 
                  box.center[0],  box.center[1], box.center[2],
                  angle])

                information = np.array([box.score])
                dets[box.name].append(detection)
                info[box.name].append(information)
            
            dets_all = {tracking_name: {'dets': np.array(dets[tracking_name]), 'info': np.array(info[tracking_name])} for tracking_name in NUSCENES_TRACKING_NAMES}
            for tracking_name in NUSCENES_TRACKING_NAMES:
                if dets_all[tracking_name]['dets'].shape[0] > 0:
                    trackers = mot_trackers[tracking_name].update(dets_all[tracking_name], args.match_distance, args.match_threshold, args.match_algorithm, fake_scene_token)
                    # (N, 9)
                    # (h, w, l, x, y, z, rot_y), tracking_id, tracking_score
                    for i in range(trackers.shape[0]):
                        sample_result = format_sample_result(lidar_data_token, tracking_name, trackers[i])
                        results[lidar_data_token].append(sample_result)
        # finished tracking all scenes, write output data
        output_data = {'meta': [], 'results': results}
        
        with open(track_result_path, 'w') as outfile:
            json.dump(output_data, outfile)
        

if __name__=="__main__":
    main()